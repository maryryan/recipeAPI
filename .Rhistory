page
size <- 50
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c(index.start, recipe.count+1)
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
for( i in 2:ceiling(recipe.count/size) ){
from <- 0 + size*i
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
if(inherits(tasty.content, "try-error"))
{
#error handling code, maybe just skip this iteration using
next
}
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
i
inherits(tasty.content, "try-error")
size <- 50
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c(index.start, recipe.count+1)
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
for( i in 2:ceiling(recipe.count/size) ){
from <- 0 + size*i
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
i
recipe.names
size <- 50
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c(index.start, recipe.count+1)
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
error <- 0
for( i in 2:ceiling(recipe.count/size) ){
from <- 0 + size*i
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
error
index.start[1]
index.start[11]
tasty.content
from
page
seq(0,recipe.count,by=50)
size <- 50
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c( index.start, recipe.count+1 )
from <- seq( 0,recipe.count,by=size )
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
error <- 0
for( i in 2:ceiling(recipe.count/size) ){
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from[i],
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
recipe.names
size <- 1
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c( index.start, recipe.count+1 )
from <- seq( 0,recipe.count,by=size )
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
error <- 0
for( i in 2:ceiling(recipe.count/size) ){
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from[i],
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
size <- 10
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c( index.start, recipe.count+1 )
from <- seq( 0,recipe.count,by=size )
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
error <- 0
for( i in 2:ceiling(recipe.count/size) ){
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from[i],
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
recipe.names
tasty.content[["items"]]$name
tasty.content
i
res
tasty.content[["items"]]
from
from[i]
try(fromJSON( tasty.reply ))
size <- 10
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c( index.start, recipe.count+1 )
from <- seq( 0,recipe.count,by=size )
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
error <- 0
for( i in 2:ceiling(recipe.count/size) ){
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from[i],
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
if(is.null(tasty.content)) next
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
i
is.null(tasty.content)
tasty.content
tasty.content[["items"]]
size <- 10
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c( index.start, recipe.count+1 )
from <- seq( 0,recipe.count,by=size )
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
error <- 0
for( i in 2:ceiling(recipe.count/size) ){
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from[i],
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
if( is.null(tasty.content[["items"]]) ) next
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
i
recipe.names
recipe.general.info <- cbind(recipe.names, recipe.slugs, recipe.type)
recipe.slugs[1]
## SCRAPE INDIVIDUAL RECIPES ##
recipe.url <- 'https://tasty.co/recipe/'
recipe.slug[1]
recipe.slugs[1]
read_html( paste(recipe.url, recipe.slugs[1]) )
paste(recipe.url, recipe.slugs[1])
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[1]) ) )
?html_nodes
bloop <- recipe.html %>%
html_attr("application/ld+json")
bloop
bloop <- recipe.html %>%
html_node("script") %>%
html_attr("application/ld+json")
bloop
bloop <- recipe.html %>%
html_node(script) %>%
html_attr("application/ld+json")
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[1]) ) )
full.ingred <- recipe.html %>%
html_nodes(".ingredients__section" ) %>%
html_nodes("li") %>%
html_text()
full.ingred
recipe.html
recipe.html %>%
html_nodes("script" )
recipe.html %>%
html_nodes("script" ) %>%
html_nodes("application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_nodes(".application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_nodes("application")
recipe.html %>%
html_nodes("script" ) %>%
html_attrs("application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_attr("application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_attr("application/ld+json") %>%
html_text()
recipe.html %>%
html_nodes("script" ) %>%
html_tag("application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_nodes("application/ld+json")
recipe.html %>%
html_nodes("script" )
recipe.html %>%
html_nodes("script" ) %>%
html_attrs("type")
recipe.html %>%
html_nodes("script" ) %>%
html_attr("type")
recipe.html %>%
html_nodes("script") %>%
html_attr("type"=="application/ld+json")
recipe.html %>%
html_nodes("script") %>%
html_attr("type"="application/ld+json")
recipe.html %>%
html_nodes("script") %>%
html_attr("type") %>%
html_attr("application/ld+json")
recipe.html %>%
html_nodes("script") %>%
html_attr("type") %>%
html_text()
recipe.html %>%
html_nodes("script") %>%
html_attr("type")
recipe.html %>%
html_nodes("script") %>%
html_nodes("application/ld+json")
recipe.html %>%
html_nodes("script")
recipe.html %>%
html_nodes("script") %>%
html_text()
bloop <- recipe.html %>%
html_nodes("script") %>%
html_text()
bloop[7]
bloop[6]
bloop[5]
bloop[4]
fromJSON(bloop[4])
fromJSON(bloop[3])
recipe.html %>%
html_nodes("script") %>%
html_attr("application/ld+json")
recipe.html %>%
html_nodes("script") %>%
html_attr("type")
recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
ingred.index <- recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.json <- ingred.json[ingred.index]
ingred.json
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.json <- na.omit( ingred.json[ingred.index] )
ingred.json
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.json.parsed <- fromJSON( na.omit( ingred.json[ingred.index] ) )
ingred.json <- na.omit( ingred.json[ingred.index] )
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.json <- na.omit( ingred.json[ingred.index] )
ingred.json.parsed <- fromJSON( ingred.json )
ingred.json.parsed <- fromJSON( ingred.json[1] )
ingred.json.parsed
ls(ingred.json.parsed)
fromJSON( ingred.json[1] )$recipeIngredient
## SCRAPE INDIVIDUAL RECIPES ##
recipe.url <- 'https://tasty.co/recipe/'
full.ingred <- list()
for( i in seq(recipe.count) ){
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[i]) ) )
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.index <- recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
ingred.json <- na.omit( ingred.json[ingred.index] )
ingred.json.parsed <- fromJSON( ingred.json[1] )$recipeIngredient
full.ingred[[i]] <- cbind(recipe.names[i], ingred.json.parsed)
}
i
recipe.slugs[i]
recipe.html
gsub( " ", "", paste(recipe.url, recipe.slugs[i]) )
read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[i]) ) )
