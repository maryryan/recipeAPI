## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
if( is.null(tasty.content[["items"]]) ) next
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
i
recipe.names
recipe.general.info <- cbind(recipe.names, recipe.slugs, recipe.type)
recipe.slugs[1]
## SCRAPE INDIVIDUAL RECIPES ##
recipe.url <- 'https://tasty.co/recipe/'
recipe.slug[1]
recipe.slugs[1]
read_html( paste(recipe.url, recipe.slugs[1]) )
paste(recipe.url, recipe.slugs[1])
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[1]) ) )
?html_nodes
bloop <- recipe.html %>%
html_attr("application/ld+json")
bloop
bloop <- recipe.html %>%
html_node("script") %>%
html_attr("application/ld+json")
bloop
bloop <- recipe.html %>%
html_node(script) %>%
html_attr("application/ld+json")
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[1]) ) )
full.ingred <- recipe.html %>%
html_nodes(".ingredients__section" ) %>%
html_nodes("li") %>%
html_text()
full.ingred
recipe.html
recipe.html %>%
html_nodes("script" )
recipe.html %>%
html_nodes("script" ) %>%
html_nodes("application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_nodes(".application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_nodes("application")
recipe.html %>%
html_nodes("script" ) %>%
html_attrs("application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_attr("application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_attr("application/ld+json") %>%
html_text()
recipe.html %>%
html_nodes("script" ) %>%
html_tag("application/ld+json")
recipe.html %>%
html_nodes("script" ) %>%
html_nodes("application/ld+json")
recipe.html %>%
html_nodes("script" )
recipe.html %>%
html_nodes("script" ) %>%
html_attrs("type")
recipe.html %>%
html_nodes("script" ) %>%
html_attr("type")
recipe.html %>%
html_nodes("script") %>%
html_attr("type"=="application/ld+json")
recipe.html %>%
html_nodes("script") %>%
html_attr("type"="application/ld+json")
recipe.html %>%
html_nodes("script") %>%
html_attr("type") %>%
html_attr("application/ld+json")
recipe.html %>%
html_nodes("script") %>%
html_attr("type") %>%
html_text()
recipe.html %>%
html_nodes("script") %>%
html_attr("type")
recipe.html %>%
html_nodes("script") %>%
html_nodes("application/ld+json")
recipe.html %>%
html_nodes("script")
recipe.html %>%
html_nodes("script") %>%
html_text()
bloop <- recipe.html %>%
html_nodes("script") %>%
html_text()
bloop[7]
bloop[6]
bloop[5]
bloop[4]
fromJSON(bloop[4])
fromJSON(bloop[3])
recipe.html %>%
html_nodes("script") %>%
html_attr("application/ld+json")
recipe.html %>%
html_nodes("script") %>%
html_attr("type")
recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
ingred.index <- recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.json <- ingred.json[ingred.index]
ingred.json
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.json <- na.omit( ingred.json[ingred.index] )
ingred.json
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.json.parsed <- fromJSON( na.omit( ingred.json[ingred.index] ) )
ingred.json <- na.omit( ingred.json[ingred.index] )
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.json <- na.omit( ingred.json[ingred.index] )
ingred.json.parsed <- fromJSON( ingred.json )
ingred.json.parsed <- fromJSON( ingred.json[1] )
ingred.json.parsed
ls(ingred.json.parsed)
fromJSON( ingred.json[1] )$recipeIngredient
## SCRAPE INDIVIDUAL RECIPES ##
recipe.url <- 'https://tasty.co/recipe/'
full.ingred <- list()
for( i in seq(recipe.count) ){
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[i]) ) )
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
ingred.index <- recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
ingred.json <- na.omit( ingred.json[ingred.index] )
ingred.json.parsed <- fromJSON( ingred.json[1] )$recipeIngredient
full.ingred[[i]] <- cbind(recipe.names[i], ingred.json.parsed)
}
i
recipe.slugs[i]
recipe.html
gsub( " ", "", paste(recipe.url, recipe.slugs[i]) )
read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[i]) ) )
g1 <- c(0,1,2,5,10)
fx1 <- c(16/30, 6/30, 4/30, 3/30, 1/30)
sum(fx1)
g2 <- g1-1
g2
sum(x2*fx1)
sum(g2*fx1)
sum(g2^2*fx1)
sum(g2^2*fx1) - (sum(g2*fx2))^2
sum(g2^2*fx1) - (sum(g2*fx1))^2
.3^2
ppois(7,3)
sum(dpois(0:7,3))
g2 <- c(-1.5, -0.5, 0.5, 3.5, 8.5)
sum(g2*fx1)
sum(g2^2*fx1)
sum(g2^2*fx1) - (sum(g2*fx1))^2
1.3/.2
choose(5,0)
dbinom(1,5,.83)
dbinom(0,5,.83)
dbinom(2,5,.83)
dbinom(3,5,.83)
dbinom(4,5,.83)
dbinom(5,5,.83)
pbinom(0,5,.83)
pbinom(1,5,.83)
pbinom(2,5,.83)
pbinom(3,5,.83)
pbinom(4,5,.83)
pbinom(5,5,.83)
pbinom(2,14,0.02)
pbinom(3,14,0.02) - dbinom(0,14,0.02)
sum(dpois(8,3))
sum(dpois(0:8,3))
ppois(8,3)
#########################
############################## Scraping Buzzfeed Tasty
############################## MARY RYAN
############################## CREATED: 09.29.2019
############################## UPDATED: 10.27.2019
#########################
#### LOAD LIBRARIES ####
library( rvest )
library( RCurl )
library( curl )
library( httr )
library( jsonlite )
options( stringsAsFactors = FALSE )
### FOUND THE TASTY API ###
# format: 'https://tasty.co/api/recipes/search?size=20&from=140&page=8&q=chicken&filter=&terms=&slugs=&tag_query='
# want to pull the slugs and insert into form URL: "https://tasty.co/recipe/slug-here"
# or if a compilation: "https://tasty.co/comilation/slug-here"
# can pull if recipe or compilation from "type"
size <- 10
from <- 1
page <- 1
query.key <- unlist( strsplit('chicken', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c( index.start, recipe.count+1 )
from <- seq( 0,recipe.count,by=size )
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
error <- 0
for( i in 2:ceiling(recipe.count/size) ){
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from[i],
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
if( is.null(tasty.content[["items"]]) ) next
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
recipe.general.info <- cbind(recipe.names, recipe.slugs, recipe.type)
just.recipes <- which(recipe.general.info[,3] == "recipe")
## SCRAPE INDIVIDUAL RECIPES ##
# within a recipe, you can search for a script of type "application/ld+json" that will give you a json including ingredients
recipe.url <- 'https://tasty.co/recipe/'
full.ingred <- list()
# function to find commas #
comma.find <- function( string ){
df <- str_split( string, "," )
extra <- lapply( df, function(x){
if( length(x) > 1 ){
x[2:length(x)]
}else{
NA
}
})
do.call(rbind, extra)
}
for( i in just.recipes ){
# compile the recipe URL #
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[i]) ) )
# get all the HTML nodes that are scripts #
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
# find the index number of the scripts that will contain the ingredient JSON #
ingred.index <- recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
# isolate the ingredient JSON scripts that we want #
ingred.json <- na.omit( ingred.json[ingred.index] )
# parse the JSON to get the ingredient list #
ingred.json.parsed <- fromJSON( ingred.json[1] )$recipeIngredient
# separate measurements and extra notes from ingredient names #
measurement.words <- c( "cups","cup", "tablespoons", "tablespoon",
"tbsp", "teaspoons", "teaspoon", "tsp", "oz", "lb")
measurement.words <- paste(measurement.words, collapse="|")
amount.number <- c(seq(30), "½", "⅓", "¼", "¾", "⅔")
amount.number <- paste(amount.number, collapse="|")
recipe.amount <- as.numeric(gsub("([0-9]+).*$", "\\1", ingred.json.parsed))
recipe.measurement <- str_extract(ingred.json.parsed, measurement.words)
#recipe.extra <- comma.find( ingred.json.parsed )
# separate ingredients from measurements #
recipe.ingred <- gsub(paste(amount.number, "|", measurement.words#,
#"|",
#paste(recipe.extra, collapse="|")
),
"\\1", ingred.json.parsed)
# trim the leading whitespace #
recipe.ingred <- trimws(recipe.ingred)
# put it all together #
full.ingred[[i]] <- cbind( recipe.names[i], recipe.amount, recipe.measurement,
recipe.ingred)#, recipe.extra)
#cbind(recipe.names[i], ingred.json.parsed)
}
# convert list of dataframes to one big dataframe #
full.ingred.df <- ldply(full.ingred, data.frame)
colnames(full.ingred.df)[1] <- "recipe.name"
full.ingred.spread <- spread(count(full.ingred.df, recipe.name, recipe.ingred),
recipe.ingred, n, fill = 0)
full.ingred.spread[1,1:10]
colnames(full.ingred.spread)
full.ingred <- list()
# function to find commas #
comma.find <- function( string ){
df <- str_split( string, "," )
extra <- lapply( df, function(x){
if( length(x) > 1 ){
x[2:length(x)]
}else{
NA
}
})
do.call(rbind, extra)
}
for( i in just.recipes ){
# compile the recipe URL #
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[i]) ) )
# get all the HTML nodes that are scripts #
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
# find the index number of the scripts that will contain the ingredient JSON #
ingred.index <- recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
# isolate the ingredient JSON scripts that we want #
ingred.json <- na.omit( ingred.json[ingred.index] )
# parse the JSON to get the ingredient list #
ingred.json.parsed <- fromJSON( ingred.json[1] )$recipeIngredient
# separate measurements and extra notes from ingredient names #
measurement.words <- c( "cups","cup", "tablespoons", "tablespoon",
"tbsp", "teaspoons", "teaspoon", "tsp", "oz", "lb")
measurement.words <- paste(measurement.words, collapse="|")
amount.number <- c(seq(30), "½", "⅓", "¼", "¾", "⅔","⅛", "⅖","⅜")
amount.number <- paste(amount.number, collapse="|")
recipe.amount <- as.numeric(gsub("([0-9]+).*$", "\\1", ingred.json.parsed))
recipe.measurement <- str_extract(ingred.json.parsed, measurement.words)
#recipe.extra <- comma.find( ingred.json.parsed )
# separate ingredients from measurements #
recipe.ingred <- gsub(paste(amount.number, "|", measurement.words#,
#"|",
#paste(recipe.extra, collapse="|")
),
"\\1", ingred.json.parsed)
# trim the leading whitespace #
recipe.ingred <- trimws(recipe.ingred)
# put it all together #
full.ingred[[i]] <- cbind( recipe.names[i], recipe.amount, recipe.measurement,
recipe.ingred)#, recipe.extra)
#cbind(recipe.names[i], ingred.json.parsed)
}
#########################
############################## Scraping Buzzfeed Tasty
############################## MARY RYAN
############################## CREATED: 09.29.2019
############################## UPDATED: 10.27.2019
#########################
#### LOAD LIBRARIES ####
library( rvest )
library( RCurl )
library( curl )
library( httr )
library( jsonlite )
options( stringsAsFactors = FALSE )
### FOUND THE TASTY API ###
# format: 'https://tasty.co/api/recipes/search?size=20&from=140&page=8&q=chicken&filter=&terms=&slugs=&tag_query='
# want to pull the slugs and insert into form URL: "https://tasty.co/recipe/slug-here"
# or if a compilation: "https://tasty.co/comilation/slug-here"
# can pull if recipe or compilation from "type"
size <- 10
from <- 1
page <- 1
query.key <- unlist( strsplit('taco', " ") )#unlist( strsplit('buddha bowl', " ") )
query.key <- paste0( query.key, collapse="+" )
tasty.api.url <- 'https://tasty.co/api/recipes/search?'
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from,
page = page,
q = query.key )
tasty.content <- fromJSON( tasty.reply )
recipe.count <- tasty.content$recipe_count
recipe.names <- recipe.slugs <- recipe.type <- rep(NA, recipe.count)
index.start <- seq( 1, recipe.count, by=size )
index.start <- c( index.start, recipe.count+1 )
from <- seq( 0,recipe.count,by=size )
recipe.names[seq(size)] <- tasty.content[["items"]]$name
recipe.slugs[seq(size)] <- tasty.content[["items"]]$slug
recipe.type[seq(size)] <- tasty.content[["items"]]$type
error <- 0
for( i in 2:ceiling(recipe.count/size) ){
page <- i
tasty.reply <- getForm( tasty.api.url,
size = size,
from = from[i],
page = page,
q = query.key )
## error handling ##
res <- try(fromJSON( tasty.reply ))
if(inherits(res, "try-error"))
{
error <- c(error, page)
#error handling code, maybe just skip this iteration using
next
}
tasty.content <- fromJSON( tasty.reply )
if( is.null(tasty.content[["items"]]) ) next
index <- index.start[i]:(index.start[(i+1)] - 1)
recipe.names[index] <- tasty.content[["items"]]$name
recipe.slugs[index] <- tasty.content[["items"]]$slug
recipe.type[index] <- tasty.content[["items"]]$type
}
recipe.general.info <- cbind(recipe.names, recipe.slugs, recipe.type)
just.recipes <- which(recipe.general.info[,3] == "recipe")
## SCRAPE INDIVIDUAL RECIPES ##
# within a recipe, you can search for a script of type "application/ld+json" that will give you a json including ingredients
recipe.url <- 'https://tasty.co/recipe/'
full.ingred <- list()
# function to find commas #
comma.find <- function( string ){
df <- str_split( string, "," )
extra <- lapply( df, function(x){
if( length(x) > 1 ){
x[2:length(x)]
}else{
NA
}
})
do.call(rbind, extra)
}
for( i in just.recipes ){
# compile the recipe URL #
recipe.html <- read_html( gsub( " ", "", paste(recipe.url, recipe.slugs[i]) ) )
# get all the HTML nodes that are scripts #
ingred.json <- recipe.html %>%
html_nodes("script") %>%
html_text()
# find the index number of the scripts that will contain the ingredient JSON #
ingred.index <- recipe.html %>%
html_nodes("script") %>%
html_attr("type") =="application/ld+json"
# isolate the ingredient JSON scripts that we want #
ingred.json <- na.omit( ingred.json[ingred.index] )
# parse the JSON to get the ingredient list #
ingred.json.parsed <- fromJSON( ingred.json[1] )$recipeIngredient
# separate measurements and extra notes from ingredient names #
measurement.words <- c( "cups","cup", "tablespoons", "tablespoon",
"tbsp", "teaspoons", "teaspoon", "tsp", "oz", "lb")
measurement.words <- paste(measurement.words, collapse="|")
amount.number <- c(seq(30), "½", "⅓", "¼", "¾", "⅔","⅛", "⅖","⅜")
amount.number <- paste(amount.number, collapse="|")
recipe.amount <- as.numeric(gsub("([0-9]+).*$", "\\1", ingred.json.parsed))
recipe.measurement <- str_extract(ingred.json.parsed, measurement.words)
#recipe.extra <- comma.find( ingred.json.parsed )
# separate ingredients from measurements #
recipe.ingred <- gsub(paste(amount.number, "|", measurement.words#,
#"|",
#paste(recipe.extra, collapse="|")
),
"\\1", ingred.json.parsed)
# trim the leading whitespace #
recipe.ingred <- trimws(recipe.ingred)
# put it all together #
full.ingred[[i]] <- cbind( recipe.names[i], recipe.amount, recipe.measurement,
recipe.ingred)#, recipe.extra)
#cbind(recipe.names[i], ingred.json.parsed)
}
# convert list of dataframes to one big dataframe #
full.ingred.df <- ldply(full.ingred, data.frame)
colnames(full.ingred.df)[1] <- "recipe.name"
full.ingred.df[1:10,]
full.ingred.spread <- spread(count(full.ingred.df, recipe.name, recipe.ingred),
recipe.ingred, n, fill = 0)
colnames(full.ingred.spread)
dim(full.ingred.spread)[2]
bloop <- kmeans(full.ingred.spread[,4:dim(full.ingred.spread)[2]], 10, nstart=20)
bloop
full.ingred.spread$cluster <- as.factor(bloop$cluster)
full.ingred.spread %>%
ggplot(aes(x=recipe.name, y=cluster)) +
geom_point
full.ingred.spread %>%
ggplot(aes(x=recipe.name, y=cluster)) +
geom_point()
dim(full.ingred.spread)
